% -------------------------------------
% Doubly nested long-range dependencies
% -------------------------------------
clear; close all; clc    
debug_mode = 1  ;
 
if debug_mode
    dbstop if error  
    training = 0;
else
    training = questdlg('Do yo u want to include a training block?','Training block','Yes','No','Yes');
    if training(1) == 'Y', training = 1; else training = 0; end
end

%% INITIALIZATION
addpath('functions')
KbName('UnifyKeyNames') 
params = getParamsLocalGlobalParadigm(debug_mode);
fid_log = createLogFileLocalGlobalParadigm(params); % OPEN LOG 

%% LOAD STIMULI 
sentences_per_block = load_stimuliLocalGlobal(params);     
% Open screens 
handles = Initialize_PTB_devices(params, debug_mode); 


%% START EXPERIMENT
 try
     %%%%%%% WAIT FOR KEY PRESS
    present_intro_slide(params, handles);
%         %     KbStrokeWait;
%         %     KbQueueStart;
%     wait_for_key_press()
            %%%%%%%% WRITE TO LOG
            fprintf(fid_log,['GrandStart\t' ...
                '\t' ...
                '\t' ...
                '\t' ...  %Stimulus serial number in original stimulus text file
                '---' '\t' ...
                num2str(GetSecs) '\t' ...
                '' '\r\n' ...
                ]); % write to log file
    
     if training 
         %%%%%%% LOOP OVER TRAINING STIMULI
         run_training_block(handles, training_words, params); 
     end
     cumTrial=0;
    % PRESENT LONG FIXATION ONLY AT THE BEGINING
    DrawFormattedText(handles.win, '+', 'center', 'center', handles.white);
    Screen('Flip', handles.win);
    WaitSecs(1.5); %Wait before experiment start
    % START LOOP OVER BLOCKS
    for block = 1 :params.n_blocks
                DrawFormattedText(handles.win, ...
            ['Starting block: ' num2str(block) '/' num2str(params.n_blocks) newline ...
            'Please wait for the block to start.'], ...
            'center', 'center', handles.white);
        Screen('Flip',handles.win);
        wait_for_key_press()

        % %%%%%% BLOCK TYPE (odd blocks are visual; even auditory)
        % %%%%%% LOOP OVER STIMULI
         run_visual_block(handles, block, sentences_per_block{block}, ...
            fid_log, cumTrial, ...
            params);   
    end 
catch
    sca
    psychrethrow(psychlasterror);
    KbQueueRelease;
    fprintf('Error occured\n')
end

%% %%%%%%% CLOSE ALL - END EXPERIMENT
fprintf('Done\n')
KbQueueRelease;
sca